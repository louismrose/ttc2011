/*
* generated by Xtext
*/

package simulator.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SpecificationLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSpecificationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTestcasesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cTestcasesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cTestcasesTestcaseParserRuleCall_3_2_0 = (RuleCall)cTestcasesAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cTestcasesAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cTestcasesTestcaseParserRuleCall_3_3_1_0 = (RuleCall)cTestcasesAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Specification:
		//	{Specification} "Specification" "{" ("testcases" "{" testcases+=Testcase ("," testcases+=Testcase)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{Specification} "Specification" "{" ("testcases" "{" testcases+=Testcase ("," testcases+=Testcase)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{Specification}
		public Action getSpecificationAction_0() { return cSpecificationAction_0; }

		//"Specification"
		public Keyword getSpecificationKeyword_1() { return cSpecificationKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("testcases" "{" testcases+=Testcase ("," testcases+=Testcase)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"testcases"
		public Keyword getTestcasesKeyword_3_0() { return cTestcasesKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//testcases+=Testcase
		public Assignment getTestcasesAssignment_3_2() { return cTestcasesAssignment_3_2; }

		//Testcase
		public RuleCall getTestcasesTestcaseParserRuleCall_3_2_0() { return cTestcasesTestcaseParserRuleCall_3_2_0; }

		//("," testcases+=Testcase)*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//testcases+=Testcase
		public Assignment getTestcasesAssignment_3_3_1() { return cTestcasesAssignment_3_3_1; }

		//Testcase
		public RuleCall getTestcasesTestcaseParserRuleCall_3_3_1_0() { return cTestcasesTestcaseParserRuleCall_3_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final RuleCall cSetModeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Condition:
		//	SetMode;
		public ParserRule getRule() { return rule; }

		//SetMode
		public RuleCall getSetModeParserRuleCall() { return cSetModeParserRuleCall; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final RuleCall cPressButtonParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Action:
		//	PressButton;
		public ParserRule getRule() { return rule; }

		//PressButton
		public RuleCall getPressButtonParserRuleCall() { return cPressButtonParserRuleCall; }
	}

	public class ObservationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Observation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObserveModeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObserveBindingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cObserveDisplayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Observation:
		//	ObserveMode | ObserveBinding | ObserveDisplay;
		public ParserRule getRule() { return rule; }

		//ObserveMode | ObserveBinding | ObserveDisplay
		public Alternatives getAlternatives() { return cAlternatives; }

		//ObserveMode
		public RuleCall getObserveModeParserRuleCall_0() { return cObserveModeParserRuleCall_0; }

		//ObserveBinding
		public RuleCall getObserveBindingParserRuleCall_1() { return cObserveBindingParserRuleCall_1; }

		//ObserveDisplay
		public RuleCall getObserveDisplayParserRuleCall_2() { return cObserveDisplayParserRuleCall_2; }
	}

	public class TestcaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Testcase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestcaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGivenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGivenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGivenGivenParserRuleCall_3_0 = (RuleCall)cGivenAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWhenKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWhenAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWhenWhenParserRuleCall_4_1_0 = (RuleCall)cWhenAssignment_4_1.eContents().get(0);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cThenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cThenThenParserRuleCall_6_0 = (RuleCall)cThenAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Testcase:
		//	"Testcase" "{" "given" given=Given ("when" when=When)? "then" then=Then "}";
		public ParserRule getRule() { return rule; }

		//"Testcase" "{" "given" given=Given ("when" when=When)? "then" then=Then "}"
		public Group getGroup() { return cGroup; }

		//"Testcase"
		public Keyword getTestcaseKeyword_0() { return cTestcaseKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"given"
		public Keyword getGivenKeyword_2() { return cGivenKeyword_2; }

		//given=Given
		public Assignment getGivenAssignment_3() { return cGivenAssignment_3; }

		//Given
		public RuleCall getGivenGivenParserRuleCall_3_0() { return cGivenGivenParserRuleCall_3_0; }

		//("when" when=When)?
		public Group getGroup_4() { return cGroup_4; }

		//"when"
		public Keyword getWhenKeyword_4_0() { return cWhenKeyword_4_0; }

		//when=When
		public Assignment getWhenAssignment_4_1() { return cWhenAssignment_4_1; }

		//When
		public RuleCall getWhenWhenParserRuleCall_4_1_0() { return cWhenWhenParserRuleCall_4_1_0; }

		//"then"
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }

		//then=Then
		public Assignment getThenAssignment_6() { return cThenAssignment_6; }

		//Then
		public RuleCall getThenThenParserRuleCall_6_0() { return cThenThenParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class GivenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Given");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGivenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cConditionsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionsConditionParserRuleCall_4_0 = (RuleCall)cConditionsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConditionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_5_1_0 = (RuleCall)cConditionsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Given:
		//	"Given" "{" "conditions" "{" conditions+=Condition ("," conditions+=Condition)* "}" "}";
		public ParserRule getRule() { return rule; }

		//"Given" "{" "conditions" "{" conditions+=Condition ("," conditions+=Condition)* "}" "}"
		public Group getGroup() { return cGroup; }

		//"Given"
		public Keyword getGivenKeyword_0() { return cGivenKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"conditions"
		public Keyword getConditionsKeyword_2() { return cConditionsKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//conditions+=Condition
		public Assignment getConditionsAssignment_4() { return cConditionsAssignment_4; }

		//Condition
		public RuleCall getConditionsConditionParserRuleCall_4_0() { return cConditionsConditionParserRuleCall_4_0; }

		//("," conditions+=Condition)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//conditions+=Condition
		public Assignment getConditionsAssignment_5_1() { return cConditionsAssignment_5_1; }

		//Condition
		public RuleCall getConditionsConditionParserRuleCall_5_1_0() { return cConditionsConditionParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class WhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "When");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cActionsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionsActionParserRuleCall_4_0 = (RuleCall)cActionsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cActionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_5_1_0 = (RuleCall)cActionsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//When:
		//	"When" "{" "actions" "{" actions+=Action ("," actions+=Action)* "}" "}";
		public ParserRule getRule() { return rule; }

		//"When" "{" "actions" "{" actions+=Action ("," actions+=Action)* "}" "}"
		public Group getGroup() { return cGroup; }

		//"When"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"actions"
		public Keyword getActionsKeyword_2() { return cActionsKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//actions+=Action
		public Assignment getActionsAssignment_4() { return cActionsAssignment_4; }

		//Action
		public RuleCall getActionsActionParserRuleCall_4_0() { return cActionsActionParserRuleCall_4_0; }

		//("," actions+=Action)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//actions+=Action
		public Assignment getActionsAssignment_5_1() { return cActionsAssignment_5_1; }

		//Action
		public RuleCall getActionsActionParserRuleCall_5_1_0() { return cActionsActionParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ThenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Then");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cObservationsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObservationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObservationsObservationParserRuleCall_4_0 = (RuleCall)cObservationsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cObservationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cObservationsObservationParserRuleCall_5_1_0 = (RuleCall)cObservationsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Then:
		//	"Then" "{" "observations" "{" observations+=Observation ("," observations+=Observation)* "}" "}";
		public ParserRule getRule() { return rule; }

		//"Then" "{" "observations" "{" observations+=Observation ("," observations+=Observation)* "}" "}"
		public Group getGroup() { return cGroup; }

		//"Then"
		public Keyword getThenKeyword_0() { return cThenKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"observations"
		public Keyword getObservationsKeyword_2() { return cObservationsKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//observations+=Observation
		public Assignment getObservationsAssignment_4() { return cObservationsAssignment_4; }

		//Observation
		public RuleCall getObservationsObservationParserRuleCall_4_0() { return cObservationsObservationParserRuleCall_4_0; }

		//("," observations+=Observation)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//observations+=Observation
		public Assignment getObservationsAssignment_5_1() { return cObservationsAssignment_5_1; }

		//Observation
		public RuleCall getObservationsObservationParserRuleCall_5_1_0() { return cObservationsObservationParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class SetModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetMode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetModeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetModeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cModeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cModeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cModeEStringParserRuleCall_3_1_0 = (RuleCall)cModeAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SetMode:
		//	{SetMode} "SetMode" "{" ("mode" mode=EString)? "}";
		public ParserRule getRule() { return rule; }

		//{SetMode} "SetMode" "{" ("mode" mode=EString)? "}"
		public Group getGroup() { return cGroup; }

		//{SetMode}
		public Action getSetModeAction_0() { return cSetModeAction_0; }

		//"SetMode"
		public Keyword getSetModeKeyword_1() { return cSetModeKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("mode" mode=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//"mode"
		public Keyword getModeKeyword_3_0() { return cModeKeyword_3_0; }

		//mode=EString
		public Assignment getModeAssignment_3_1() { return cModeAssignment_3_1; }

		//EString
		public RuleCall getModeEStringParserRuleCall_3_1_0() { return cModeEStringParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class PressButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PressButton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPressButtonAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPressButtonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cButtonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cButtonAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cButtonEStringParserRuleCall_3_1_0 = (RuleCall)cButtonAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PressButton:
		//	{PressButton} "PressButton" "{" ("button" button=EString)? "}";
		public ParserRule getRule() { return rule; }

		//{PressButton} "PressButton" "{" ("button" button=EString)? "}"
		public Group getGroup() { return cGroup; }

		//{PressButton}
		public Action getPressButtonAction_0() { return cPressButtonAction_0; }

		//"PressButton"
		public Keyword getPressButtonKeyword_1() { return cPressButtonKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("button" button=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//"button"
		public Keyword getButtonKeyword_3_0() { return cButtonKeyword_3_0; }

		//button=EString
		public Assignment getButtonAssignment_3_1() { return cButtonAssignment_3_1; }

		//EString
		public RuleCall getButtonEStringParserRuleCall_3_1_0() { return cButtonEStringParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ObserveModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObserveMode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObserveModeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cObserveModeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cModeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cModeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cModeEStringParserRuleCall_3_1_0 = (RuleCall)cModeAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObserveMode:
		//	{ObserveMode} "ObserveMode" "{" ("mode" mode=EString)? "}";
		public ParserRule getRule() { return rule; }

		//{ObserveMode} "ObserveMode" "{" ("mode" mode=EString)? "}"
		public Group getGroup() { return cGroup; }

		//{ObserveMode}
		public Action getObserveModeAction_0() { return cObserveModeAction_0; }

		//"ObserveMode"
		public Keyword getObserveModeKeyword_1() { return cObserveModeKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("mode" mode=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//"mode"
		public Keyword getModeKeyword_3_0() { return cModeKeyword_3_0; }

		//mode=EString
		public Assignment getModeAssignment_3_1() { return cModeAssignment_3_1; }

		//EString
		public RuleCall getModeEStringParserRuleCall_3_1_0() { return cModeEStringParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ObserveBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObserveBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObserveBindingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cObserveBindingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cButtonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cButtonAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cButtonEStringParserRuleCall_4_1_0 = (RuleCall)cButtonAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ObserveBinding:
		//	{ObserveBinding} "ObserveBinding" name=EString "{" ("button" button=EString)? "}";
		public ParserRule getRule() { return rule; }

		//{ObserveBinding} "ObserveBinding" name=EString "{" ("button" button=EString)? "}"
		public Group getGroup() { return cGroup; }

		//{ObserveBinding}
		public Action getObserveBindingAction_0() { return cObserveBindingAction_0; }

		//"ObserveBinding"
		public Keyword getObserveBindingKeyword_1() { return cObserveBindingKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("button" button=EString)?
		public Group getGroup_4() { return cGroup_4; }

		//"button"
		public Keyword getButtonKeyword_4_0() { return cButtonKeyword_4_0; }

		//button=EString
		public Assignment getButtonAssignment_4_1() { return cButtonAssignment_4_1; }

		//EString
		public RuleCall getButtonEStringParserRuleCall_4_1_0() { return cButtonEStringParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ObserveDisplayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObserveDisplay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObserveDisplayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cObserveDisplayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObserveDisplay:
		//	{ObserveDisplay} "ObserveDisplay" "{" ("value" value=EString)? "}";
		public ParserRule getRule() { return rule; }

		//{ObserveDisplay} "ObserveDisplay" "{" ("value" value=EString)? "}"
		public Group getGroup() { return cGroup; }

		//{ObserveDisplay}
		public Action getObserveDisplayAction_0() { return cObserveDisplayAction_0; }

		//"ObserveDisplay"
		public Keyword getObserveDisplayKeyword_1() { return cObserveDisplayKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("value" value=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//"value"
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }

		//value=EString
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//EString
		public RuleCall getValueEStringParserRuleCall_3_1_0() { return cValueEStringParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	private SpecificationElements pSpecification;
	private ConditionElements pCondition;
	private ActionElements pAction;
	private ObservationElements pObservation;
	private TestcaseElements pTestcase;
	private GivenElements pGiven;
	private WhenElements pWhen;
	private ThenElements pThen;
	private SetModeElements pSetMode;
	private EStringElements pEString;
	private PressButtonElements pPressButton;
	private ObserveModeElements pObserveMode;
	private ObserveBindingElements pObserveBinding;
	private ObserveDisplayElements pObserveDisplay;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SpecificationLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Specification:
	//	{Specification} "Specification" "{" ("testcases" "{" testcases+=Testcase ("," testcases+=Testcase)* "}")? "}";
	public SpecificationElements getSpecificationAccess() {
		return (pSpecification != null) ? pSpecification : (pSpecification = new SpecificationElements());
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}

	//Condition:
	//	SetMode;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//Action:
	//	PressButton;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Observation:
	//	ObserveMode | ObserveBinding | ObserveDisplay;
	public ObservationElements getObservationAccess() {
		return (pObservation != null) ? pObservation : (pObservation = new ObservationElements());
	}
	
	public ParserRule getObservationRule() {
		return getObservationAccess().getRule();
	}

	//Testcase:
	//	"Testcase" "{" "given" given=Given ("when" when=When)? "then" then=Then "}";
	public TestcaseElements getTestcaseAccess() {
		return (pTestcase != null) ? pTestcase : (pTestcase = new TestcaseElements());
	}
	
	public ParserRule getTestcaseRule() {
		return getTestcaseAccess().getRule();
	}

	//Given:
	//	"Given" "{" "conditions" "{" conditions+=Condition ("," conditions+=Condition)* "}" "}";
	public GivenElements getGivenAccess() {
		return (pGiven != null) ? pGiven : (pGiven = new GivenElements());
	}
	
	public ParserRule getGivenRule() {
		return getGivenAccess().getRule();
	}

	//When:
	//	"When" "{" "actions" "{" actions+=Action ("," actions+=Action)* "}" "}";
	public WhenElements getWhenAccess() {
		return (pWhen != null) ? pWhen : (pWhen = new WhenElements());
	}
	
	public ParserRule getWhenRule() {
		return getWhenAccess().getRule();
	}

	//Then:
	//	"Then" "{" "observations" "{" observations+=Observation ("," observations+=Observation)* "}" "}";
	public ThenElements getThenAccess() {
		return (pThen != null) ? pThen : (pThen = new ThenElements());
	}
	
	public ParserRule getThenRule() {
		return getThenAccess().getRule();
	}

	//SetMode:
	//	{SetMode} "SetMode" "{" ("mode" mode=EString)? "}";
	public SetModeElements getSetModeAccess() {
		return (pSetMode != null) ? pSetMode : (pSetMode = new SetModeElements());
	}
	
	public ParserRule getSetModeRule() {
		return getSetModeAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//PressButton:
	//	{PressButton} "PressButton" "{" ("button" button=EString)? "}";
	public PressButtonElements getPressButtonAccess() {
		return (pPressButton != null) ? pPressButton : (pPressButton = new PressButtonElements());
	}
	
	public ParserRule getPressButtonRule() {
		return getPressButtonAccess().getRule();
	}

	//ObserveMode:
	//	{ObserveMode} "ObserveMode" "{" ("mode" mode=EString)? "}";
	public ObserveModeElements getObserveModeAccess() {
		return (pObserveMode != null) ? pObserveMode : (pObserveMode = new ObserveModeElements());
	}
	
	public ParserRule getObserveModeRule() {
		return getObserveModeAccess().getRule();
	}

	//ObserveBinding:
	//	{ObserveBinding} "ObserveBinding" name=EString "{" ("button" button=EString)? "}";
	public ObserveBindingElements getObserveBindingAccess() {
		return (pObserveBinding != null) ? pObserveBinding : (pObserveBinding = new ObserveBindingElements());
	}
	
	public ParserRule getObserveBindingRule() {
		return getObserveBindingAccess().getRule();
	}

	//ObserveDisplay:
	//	{ObserveDisplay} "ObserveDisplay" "{" ("value" value=EString)? "}";
	public ObserveDisplayElements getObserveDisplayAccess() {
		return (pObserveDisplay != null) ? pObserveDisplay : (pObserveDisplay = new ObserveDisplayElements());
	}
	
	public ParserRule getObserveDisplayRule() {
		return getObserveDisplayAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
