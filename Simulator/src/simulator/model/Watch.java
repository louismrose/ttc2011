/*******************************************************************************
 * Copyright (c) 2011 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Louis Rose - initial API and implementation
 ******************************************************************************/
package simulator.model;

import java.io.Serializable;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;

import simulator.model.util.DateUtils;
import simulator.trace.Stimulus;
import simulator.trace.Trace;
import simulator.trace.TraceFactory;


public class Watch implements Serializable {

	// Generated by Eclipse
	private static final long serialVersionUID = -6674240843706759860L;
	
	private final Trace trace = TraceFactory.eINSTANCE.createTrace();
	private final Simulation simulation = new Simulation(trace);

	private final Display display = new Display();
	private final Modes modes;
	
	private final Alarm alarm;
	
	
	public Watch() {
		//final Mode stopwatchMode = new Mode("stopwatch", new ModeButtonBehaviour());
		
		this(new Mode("time", new AlarmButtonBehaviour(), new ModeButtonBehaviour(), new DisplayButtonBehaviour()));
	}
	
	public Watch(Mode... modes) {
		this(Arrays.asList(modes));
	}
	
	public Watch(Collection<Mode> modes) {
		final Date alarmTime = DateUtils.add(simulation.getCurrentTime(), Calendar.MINUTE, 3);
		alarm = new Alarm(alarmTime);
		
		this.modes = new Modes(modes);
		this.modes.setWatch(this);
	}

	public Alarm getAlarm() {
		return alarm;
	}
	
	public Display getDisplay() {
		return display;
	}
	
	public Modes getModes() {
		return modes;
	}
	
	public Simulation getSimualtion() {
		return simulation;
	}
	
	public Trace getTrace() {
		return trace;
	}
	
	public void pressButton(int index) {
		addButtonPressToTrace(index);
		modes.pressButton(index);
	}
	
	private void addButtonPressToTrace(int index) {
		final Stimulus stimulus = TraceFactory.eINSTANCE.createStimulus();
		stimulus.setType("button");
		stimulus.getParams().add("" + index);
		trace.getElements().add(stimulus);
	}
	
	public boolean isAlarmTime() {
		return alarm.isAlarmTime(simulation.getCurrentTime());
	}
	
	public String getDisplayText() {
		return display.getText(simulation.getCurrentTime());
	}
}
