/*******************************************************************************
 * Copyright (c) 2011 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Louis Rose - initial API and implementation
 ******************************************************************************/
package simulator.model;

import java.io.Serializable;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

import simulator.config.ChangeDisplay;
import simulator.config.EvaluateExpression;
import simulator.model.actions.Action;
import simulator.model.actions.ChangeDisplayAction;
import simulator.model.actions.ChangeIndicatorAction;
import simulator.model.actions.DisplayButtonBehaviour;
import simulator.model.actions.EvaluateExpressionAction;
import simulator.model.actions.NextModeAction;

public class Mode implements Serializable {

	// Generated by Eclipse
	private static final long serialVersionUID = -4160553329504282481L;	
	
	private final String name;
	private final List<Button> buttons;
	private final List<Action> entryActions = new LinkedList<Action>();
	private final List<TimeVariable> timeVariables = new LinkedList<TimeVariable>();
	private final List<Constant> constants  = new LinkedList<Constant>();
	
	private Watch watch;
	
	
	public Mode(String name, Button... buttons) {
		this.name = name;
		this.buttons = Arrays.asList(buttons);
	}
	
	public Mode(Watch watch, simulator.config.Mode mode) {
		this.name = mode.getName();
		this.buttons = new LinkedList<Button>();
		
		for (simulator.config.Button buttonSpec : mode.getButtons()) {			
			final Action buttonBehaviour;
			
			if (buttonSpec.getBehaviour() instanceof simulator.config.ChangeIndicator) {
				buttonBehaviour = new ChangeIndicatorAction();
			
			} else if (buttonSpec.getBehaviour() instanceof simulator.config.DisplayButtonBehaviour) {
				buttonBehaviour = new DisplayButtonBehaviour();
				
			} else if (buttonSpec.getBehaviour() instanceof simulator.config.NextMode) {
				buttonBehaviour = new NextModeAction();

			} else if (buttonSpec.getBehaviour() instanceof simulator.config.EvaluateExpression) {
				buttonBehaviour = new EvaluateExpressionAction((EvaluateExpression)buttonSpec.getBehaviour());
			
			} else {
				throw new IllegalArgumentException("The mode '" + mode.getName() + "' contains a button with an unsupported behaviour: " + buttonSpec.getBehaviour());
			}
			
			buttons.add(new Button(buttonSpec.getName(), buttonBehaviour));
		}
		
		for (simulator.config.Action entryAction : mode.getEntryActions()) {
			final Action action = new ChangeDisplayAction(((ChangeDisplay)entryAction).getNewValue(), watch);
			entryActions.add(action);
		}
		
		for (simulator.config.Variable variable : mode.getVariables()) {
			timeVariables.add(new TimeVariable(variable));
		}
		
		for (simulator.config.Constant constant : mode.getConstants()) {
			constants.add(new Constant(constant));
		}
	}

	public String getName() {
		return name;
	}
	
	public List<String> getButtonNames() {
		final List<String> names = new LinkedList<String>();
		
		for (Button button : buttons) {
			names.add(button.getName());
		}
		
		return names;
	}
	
	public void pressButton(int index) {
		buttons.get(index).press();
	}

	public void setWatch(Watch watch) {
		this.watch = watch;
		
		for (Button button : buttons) {
			button.setWatch(watch);
		}
	}

	public void enter() {
		for (Action entryAction : entryActions) {
			entryAction.run(watch);
		}
	}

	public TimeVariable getTimeVariable(String variableName) {
		for (TimeVariable timeVariable : timeVariables) {
			if (timeVariable.getName().equals(variableName)) {
				return timeVariable;
			}
		}
		
		return null;
	}

	public Displayable getConstant(String value) {
		for (Constant constant : constants) {
			if (constant.getValue().equals(value)) {
				return constant;
			}
		}
		
		return null;
	}
}
