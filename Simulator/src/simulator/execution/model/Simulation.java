/*******************************************************************************
 * Copyright (c) 2011 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Louis Rose - initial API and implementation
 ******************************************************************************/
package simulator.execution.model;

import java.io.IOException;
import java.io.Serializable;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;

import simulator.config.Configuration;
import simulator.config.Mode;
import simulator.config.UnitOfTime;
import simulator.execution.model.state.State;
import simulator.model.util.DateUtils;
import simulator.trace.Stimulus;
import simulator.trace.Trace;
import simulator.trace.TraceFactory;

public class Simulation implements Serializable {

	// Generated by Eclipse
	private static final long serialVersionUID = 8378817217535302346L;
	
	private final SerializableConfiguration configuration;
	private final State state;
	private final Trace trace = TraceFactory.eINSTANCE.createTrace();
	
	private transient Modes modes;
	
	public Simulation(Configuration configuration) throws IOException {
		this.configuration = new SerializableConfiguration(configuration);
		this.state = new State(configuration.getModes().size());
		
		getModes().modeChanged(state);
	}

	private Modes getModes() {
		if (modes == null) {
			this.modes = new Modes(configuration.getModes());
			state.addModeObserver(modes);
		}
		
		return modes;
	}
	
	public Mode getCurrentMode() {
		return getModes().getCurrentMode(state);
	}

	public String getDisplayText() {
		return state.getDisplayText();
	}
	
	public String getIndicatorText() {
		return state.getIndicatorText();
	}
	
	public Trace getTrace() {
		return trace;
	}
	
	public void pressButton(int buttonIndex) {
		addButtonPressToTrace(buttonIndex);
		getModes().pressButton(buttonIndex, state);
	}
	
	private void addButtonPressToTrace(int index) {
		final Stimulus stimulus = TraceFactory.eINSTANCE.createStimulus();
		stimulus.setType("button");
		stimulus.getParams().add("" + index);
		trace.getElements().add(stimulus);
	}
	
	public Collection<VariableWithValue> getVariableValues() {
		return state.getVariableValues();
	}

	public void incrementVariable(String variableName, UnitOfTime unit) {
		final Date currentValue = state.getValueOf(variableName);
		final Date newValue = DateUtils.add(currentValue, unit == UnitOfTime.HOUR ? Calendar.HOUR : Calendar.MINUTE, 1);
		
		state.setValueOf(variableName, newValue);
	}
}